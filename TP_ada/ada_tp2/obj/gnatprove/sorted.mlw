(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"system.ads" 1 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float64.t)  =
  #"system.ads" 1 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vect" defined at sorted.ads:6, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "vect" defined at sorted.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Sorted__vect
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vect #"sorted.ads" 6 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type vect__ref #"sorted.ads" 6 0 0# =
  { mutable vect__content "model_trace:" : vect }
 
 function vect__ref___projection #"sorted.ads" 6 0 0# 
   (a : vect__ref) : vect =
  a.vect__content
 
 meta "model_projection" function vect__ref___projection
 
 meta "inline : no" function vect__ref___projection
 
 val vect__havoc #"sorted.ads" 6 0 0# 
   (x : vect__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10s" defined at sorted.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10s #"sorted.ads" 11 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref #"sorted.ads" 11 0 0# =
  { mutable t10s__content "model_trace:" : t10s }
 
 function t10s__ref___projection #"sorted.ads" 11 0 0# 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc #"sorted.ads" 11 0 0# 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "v" defined at sorted.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Sorted__is_sorted__v
 use import "_gnatprove_standard".Main
 use        Sorted__vect

 function v #"sorted.ads" 13 0 0# "model_projected" "model_trace:2634" 
   : Sorted__vect.vect
 
 function attr__ATTRIBUTE_ADDRESS #"sorted.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at sorted.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__is_sorted__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T12s" defined at sorted.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Sorted__is_sorted__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12s #"sorted.ads" 16 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref #"sorted.ads" 16 0 0# =
  { mutable t12s__content "model_trace:" : t12s }
 
 function t12s__ref___projection #"sorted.ads" 16 0 0# 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc #"sorted.ads" 16 0 0# 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "is_sorted" defined at sorted.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sorted__is_sorted
 use import "_gnatprove_standard".Main
 use        Sorted__vect

 function is_sorted #"sorted.ads" 13 0 0# 
   (v : Sorted__vect.vect) : bool
 
 predicate is_sorted__function_guard #"sorted.ads" 6 0 0# 
   (result : bool) (v : Sorted__vect.vect) 

end

(* Module for defining the constant "v" defined at sorted.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Sorted__min__v
 use import "_gnatprove_standard".Main
 use        Sorted__vect

 function v #"sorted.ads" 18 0 0# "model_projected" "model_trace:2697" 
   : Sorted__vect.vect
 
 function attr__ATTRIBUTE_ADDRESS #"sorted.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at sorted.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__min__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T14s" defined at sorted.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Sorted__min__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14s #"sorted.ads" 21 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14s__ref #"sorted.ads" 21 0 0# =
  { mutable t14s__content "model_trace:" : t14s }
 
 function t14s__ref___projection #"sorted.ads" 21 0 0# 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc #"sorted.ads" 21 0 0# 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "min" defined at sorted.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sorted__min
 use import "_gnatprove_standard".Main
 use        Sorted__vect

 function min #"sorted.ads" 18 0 0# 
   (v : Sorted__vect.vect) : int
 
 predicate min__function_guard #"system.ads" 1 0 0# 
   (result : int) (v : Sorted__vect.vect) 

end

(* Module for axiomatizing type "TS1bP1" defined at sorted.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 #"sorted.adb" 5 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref #"sorted.adb" 5 0 0# =
  { mutable tS1bP1__content "model_trace:" : tS1bP1 }
 
 function tS1bP1__ref___projection #"sorted.adb" 5 0 0# 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc #"sorted.adb" 5 0 0# 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at sorted.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__init__TS1bP1

 type component_type #"sorted.adb" 5 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Sorted__init__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b #"sorted.adb" 5 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref #"sorted.adb" 5 0 0# =
  { mutable s1b__content "model_trace:" : s1b }
 
 function s1b__ref___projection #"sorted.adb" 5 0 0# 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc #"sorted.adb" 5 0 0# 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at sorted.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__L_1__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b #"sorted.adb" 8 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref #"sorted.adb" 8 0 0# =
  { mutable t2b__content "model_trace:" : t2b }
 
 function t2b__ref___projection #"sorted.adb" 8 0 0# 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc #"sorted.adb" 8 0 0# 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at sorted.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__L_1__L5b__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b #"sorted.adb" 10 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (sorted__init__L_1__i : int) : int
 
 predicate dynamic_property #"sorted.adb" 8 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"sorted.adb" 8 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref #"sorted.adb" 10 0 0# =
  { mutable t6b__content "model_trace:" : t6b }
 
 function t6b__ref___projection #"sorted.adb" 10 0 0# 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc #"sorted.adb" 10 0 0# 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at sorted.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b #"sorted.adb" 10 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (sorted__init__L_1__i : int) : int
 
 predicate dynamic_property #"sorted.adb" 8 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"sorted.adb" 8 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref #"sorted.adb" 10 0 0# =
  { mutable t4b__content "model_trace:" : t4b }
 
 function t4b__ref___projection #"sorted.adb" 10 0 0# 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc #"sorted.adb" 10 0 0# 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at sorted.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Sorted__init__L7b__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t8b #"sorted.adb" 12 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref #"sorted.adb" 12 0 0# =
  { mutable t8b__content "model_trace:" : t8b }
 
 function t8b__ref___projection #"sorted.adb" 12 0 0# 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref___projection
 
 meta "inline : no" function t8b__ref___projection
 
 val t8b__havoc #"sorted.adb" 12 0 0# 
   (x : t8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS9bP1" defined at sorted.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Sorted__is_sorted__TS9bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS9bP1 #"sorted.adb" 15 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS9bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS9bP1__ref #"sorted.adb" 15 0 0# =
  { mutable tS9bP1__content "model_trace:" : tS9bP1 }
 
 function tS9bP1__ref___projection #"sorted.adb" 15 0 0# 
   (a : tS9bP1__ref) : tS9bP1 =
  a.tS9bP1__content
 
 meta "model_projection" function tS9bP1__ref___projection
 
 meta "inline : no" function tS9bP1__ref___projection
 
 val tS9bP1__havoc #"sorted.adb" 15 0 0# 
   (x : tS9bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S9b" defined at sorted.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Sorted__is_sorted__S9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__is_sorted__TS9bP1

 type component_type #"sorted.adb" 15 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Sorted__is_sorted__TS9bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s9b #"sorted.adb" 15 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s9b__ref #"sorted.adb" 15 0 0# =
  { mutable s9b__content "model_trace:" : s9b }
 
 function s9b__ref___projection #"sorted.adb" 15 0 0# 
   (a : s9b__ref) : s9b =
  a.s9b__content
 
 meta "model_projection" function s9b__ref___projection
 
 meta "inline : no" function s9b__ref___projection
 
 val s9b__havoc #"sorted.adb" 15 0 0# 
   (x : s9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at sorted.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Sorted__is_sorted__L_2__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10b #"sorted.adb" 18 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref #"sorted.adb" 18 0 0# =
  { mutable t10b__content "model_trace:" : t10b }
 
 function t10b__ref___projection #"sorted.adb" 18 0 0# 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc #"sorted.adb" 18 0 0# 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS13bP1" defined at sorted.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Sorted__min__TS13bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS13bP1 #"sorted.adb" 27 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS13bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS13bP1__ref #"sorted.adb" 27 0 0# =
  { mutable tS13bP1__content "model_trace:" : tS13bP1 }
 
 function tS13bP1__ref___projection #"sorted.adb" 27 0 0# 
   (a : tS13bP1__ref) : tS13bP1 =
  a.tS13bP1__content
 
 meta "model_projection" function tS13bP1__ref___projection
 
 meta "inline : no" function tS13bP1__ref___projection
 
 val tS13bP1__havoc #"sorted.adb" 27 0 0# 
   (x : tS13bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S13b" defined at sorted.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Sorted__min__S13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__min__TS13bP1

 type component_type #"sorted.adb" 27 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Sorted__min__TS13bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s13b #"sorted.adb" 27 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s13b__ref #"sorted.adb" 27 0 0# =
  { mutable s13b__content "model_trace:" : s13b }
 
 function s13b__ref___projection #"sorted.adb" 27 0 0# 
   (a : s13b__ref) : s13b =
  a.s13b__content
 
 meta "model_projection" function s13b__ref___projection
 
 meta "inline : no" function s13b__ref___projection
 
 val s13b__havoc #"sorted.adb" 27 0 0# 
   (x : s13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at sorted.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Sorted__min__L_3__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b #"sorted.adb" 31 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref #"sorted.adb" 31 0 0# =
  { mutable t14b__content "model_trace:" : t14b }
 
 function t14b__ref___projection #"sorted.adb" 31 0 0# 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc #"sorted.adb" 31 0 0# 
   (x : t14b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "v" defined at sorted.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module Sorted__init__v
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val v #"sorted.ads" 8 0 0# "model_projected" "model_trace:2587"  : Array__Int__Standard__integer.map__ref 
 
 function v__first #"sorted.ads" 8 0 0# "model_projected" "model_trace:2587'First" 
   : Standard__integer.integer
 
 function v__last #"sorted.ads" 8 0 0# "model_projected" "model_trace:2587'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at sorted.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__init__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at sorted.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Sorted__init__L_1__i
 use import "_gnatprove_standard".Main

 val i #"sorted.adb" 8 0 0# "model_projected" "model_trace:2327"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"sorted.adb" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at sorted.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__init__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at sorted.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Sorted__is_sorted__L_2__i
 use import "_gnatprove_standard".Main

 val i #"sorted.adb" 18 0 0# "model_projected" "model_trace:2419"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"sorted.adb" 18 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at sorted.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__is_sorted__L_2__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "min" defined at sorted.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Sorted__min__min
 use import "_gnatprove_standard".Main

 val min #"sorted.adb" 28 0 0# "model_projected" "model_trace:2474"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "min" defined at sorted.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__min__min___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at sorted.adb:31, created in Gnat2Why.Decls.Translate_Variable *)
module Sorted__min__L_3__i
 use import "_gnatprove_standard".Main

 val i #"sorted.adb" 31 0 0# "model_projected" "model_trace:2489"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"sorted.adb" 31 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at sorted.adb:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__min__L_3__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"sorted.adb" 31 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_4 : int) (temp___skip_top_level_5 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___skip_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_10 : int) (temp___skip_top_level_11 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___skip_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_16 : int) (temp___skip_top_level_17 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___skip_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_22 : int) (temp___skip_top_level_23 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___skip_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_28 : int) (temp___skip_top_level_29 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___skip_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_34 : int) (temp___skip_top_level_35 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___skip_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Float32.t) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_42 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_45)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_46 : Float32.t) (temp___skip_top_level_47 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Float32.t) (temp___is_init_48 : bool) (temp___skip_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_48 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_51)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_52 : Float32.t) (temp___skip_top_level_53 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Float64.t) (temp___is_init_54 : bool) (temp___skip_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_54 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_57)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_58 : Float64.t) (temp___skip_top_level_59 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : int) (temp___is_init_60 : bool) (temp___skip_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_60 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_63)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_64 : int) (temp___skip_top_level_65 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___skip_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_66 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_70 : int) (temp___skip_top_level_71 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___skip_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_72 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_76 : int) (temp___skip_top_level_77 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_82 : Standard__string.string) (temp___is_init_79 : bool) (temp___skip_constant_80 : bool) (temp___do_toplevel_81 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_80) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_82) (Standard__string.last temp___expr_82))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_88 : Standard__wide_string.wide_string) (temp___is_init_85 : bool) (temp___skip_constant_86 : bool) (temp___do_toplevel_87 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_86) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_88) (Standard__wide_string.last temp___expr_88))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_94 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_91 : bool) (temp___skip_constant_92 : bool) (temp___do_toplevel_93 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_92) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_94) (Standard__wide_wide_string.last temp___expr_94))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_99 : Standard__duration.duration) (temp___is_init_96 : bool) (temp___skip_constant_97 : bool) (temp___do_toplevel_98 : bool)  =
  #"system.ads" 1 0 0# true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_100 : Standard__duration.duration) (temp___skip_top_level_101 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_105 : int) (temp___is_init_102 : bool) (temp___skip_constant_103 : bool) (temp___do_toplevel_104 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_102 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_105)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_106 : int) (temp___skip_top_level_107 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_111 : int) (temp___is_init_108 : bool) (temp___skip_constant_109 : bool) (temp___do_toplevel_110 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_108 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_111)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_112 : int) (temp___skip_top_level_113 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_117 : int) (temp___is_init_114 : bool) (temp___skip_constant_115 : bool) (temp___do_toplevel_116 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_114 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_117)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_118 : int) (temp___skip_top_level_119 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_123 : int) (temp___is_init_120 : bool) (temp___skip_constant_121 : bool) (temp___do_toplevel_122 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_120 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_123)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_129 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_126 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_129)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_130 : int) (temp___skip_top_level_131 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module for possibly declaring a logic function for "init" defined at sorted.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sorted__init
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at sorted.adb:8, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Sorted__init__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at sorted.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__init__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at sorted.adb:18, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Sorted__is_sorted__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at sorted.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__is_sorted__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at sorted.adb:31, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Sorted__min__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at sorted.adb:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sorted__min__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "vect" defined at sorted.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__vect___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        Sorted__vect

 predicate dynamic_invariant #"sorted.adb" 31 0 0# "inline" 
   (temp___expr_136 : Sorted__vect.vect) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool)  =
  #"sorted.ads" 6 0 0# (if (temp___skip_constant_134) then (
   true) else (
   (Sorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Sorted__vect.first temp___expr_136) (Sorted__vect.last temp___expr_136))))

end

(* Module giving axioms for type "T10s" defined at sorted.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at sorted.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__is_sorted__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14s" defined at sorted.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__min__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at sorted.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at sorted.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Sorted__init__v
 use        Sorted__init__S1b

 predicate dynamic_invariant #"sorted.ads" 6 0 0# "inline" 
   (temp___expr_147 : Sorted__init__S1b.s1b) (temp___is_init_144 : bool) (temp___skip_constant_145 : bool) (temp___do_toplevel_146 : bool)  =
  #"sorted.adb" 5 0 0# (if (temp___skip_constant_145) then (
   true) else (
   ( (Sorted__init__S1b.dynamic_property (Standard__integer__rep.to_rep Sorted__init__v.v__first) (Standard__integer__rep.to_rep Sorted__init__v.v__last) (Sorted__init__S1b.first temp___expr_147) (Sorted__init__S1b.last temp___expr_147)) /\ ( ((Sorted__init__S1b.first temp___expr_147) = (Standard__integer__rep.to_rep Sorted__init__v.v__first)) /\ ((Sorted__init__S1b.last temp___expr_147) = (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) )))
 
 predicate default_initial_assumption #"sorted.ads" 8 0 0# "inline" 
   (temp___expr_149 : Sorted__init__S1b.s1b) (temp___skip_top_level_150 : bool)  =
  #"sorted.adb" 5 0 0# true

end

(* Module giving axioms for type "T2b" defined at sorted.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__L_1__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at sorted.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__L_1__L5b__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at sorted.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__L_1__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8b" defined at sorted.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__init__L7b__T8b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS9bP1" defined at sorted.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__is_sorted__TS9bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S9b" defined at sorted.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__is_sorted__S9b___axiom
 use import "_gnatprove_standard".Main
 use        Sorted__vect
 use        Sorted__is_sorted__v
 use        Sorted__is_sorted__S9b

 predicate dynamic_invariant #"sorted.adb" 5 0 0# "inline" 
   (temp___expr_156 : Sorted__is_sorted__S9b.s9b) (temp___is_init_153 : bool) (temp___skip_constant_154 : bool) (temp___do_toplevel_155 : bool)  =
  #"sorted.adb" 15 0 0# (if (temp___skip_constant_154) then (
   true) else (
   ( (Sorted__is_sorted__S9b.dynamic_property (Sorted__vect.first Sorted__is_sorted__v.v) (Sorted__vect.last Sorted__is_sorted__v.v) (Sorted__is_sorted__S9b.first temp___expr_156) (Sorted__is_sorted__S9b.last temp___expr_156)) /\ ( ((Sorted__is_sorted__S9b.first temp___expr_156) = (Sorted__vect.first Sorted__is_sorted__v.v)) /\ ((Sorted__is_sorted__S9b.last temp___expr_156) = (Sorted__vect.last Sorted__is_sorted__v.v)) ) )))
 
 predicate default_initial_assumption #"sorted.ads" 13 0 0# "inline" 
   (temp___expr_158 : Sorted__is_sorted__S9b.s9b) (temp___skip_top_level_159 : bool)  =
  #"sorted.adb" 15 0 0# true

end

(* Module giving axioms for type "T10b" defined at sorted.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__is_sorted__L_2__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS13bP1" defined at sorted.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__min__TS13bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S13b" defined at sorted.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__min__S13b___axiom
 use import "_gnatprove_standard".Main
 use        Sorted__vect
 use        Sorted__min__v
 use        Sorted__min__S13b

 predicate dynamic_invariant #"sorted.adb" 15 0 0# "inline" 
   (temp___expr_165 : Sorted__min__S13b.s13b) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool)  =
  #"sorted.adb" 27 0 0# (if (temp___skip_constant_163) then (
   true) else (
   ( (Sorted__min__S13b.dynamic_property (Sorted__vect.first Sorted__min__v.v) (Sorted__vect.last Sorted__min__v.v) (Sorted__min__S13b.first temp___expr_165) (Sorted__min__S13b.last temp___expr_165)) /\ ( ((Sorted__min__S13b.first temp___expr_165) = (Sorted__vect.first Sorted__min__v.v)) /\ ((Sorted__min__S13b.last temp___expr_165) = (Sorted__vect.last Sorted__min__v.v)) ) )))
 
 predicate default_initial_assumption #"sorted.ads" 18 0 0# "inline" 
   (temp___expr_167 : Sorted__min__S13b.s13b) (temp___skip_top_level_168 : bool)  =
  #"sorted.adb" 27 0 0# true

end

(* Module giving axioms for type "T14b" defined at sorted.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Sorted__min__L_3__T14b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "init" defined at sorted.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sorted__init___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Array__Int__Standard__integer

 val init #"sorted.ads" 8 0 0# 
   (v : Array__Int__Standard__integer.map__ref) (v__first : Standard__integer.integer) (v__last : Standard__integer.integer) : unit
  requires { #"system.ads" 1 0 0# ((Standard__integer__rep.to_rep v__first) <= (Standard__integer__rep.to_rep v__last)) }
  ensures { #"sorted.ads" 8 0 0# ( (forall x #"sorted.ads" 11 0 0#  "model" "model_trace:2612"  : int.
   ( ( ((Standard__integer__rep.to_rep v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep v__last)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get v.Array__Int__Standard__integer.map__content x)) = 0) )) /\ (if (True) then (
   true) else (
   (Sorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep v__first) (Standard__integer__rep.to_rep v__last)))) ) }
  writes {v}

end

(* Module for declaring a program function (and possibly an axiom) for "is_sorted" defined at sorted.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sorted__is_sorted___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Sorted__vect___axiom
 use        Sorted__is_sorted
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val is_sorted #"sorted.ads" 13 0 0# 
   (v : Sorted__vect.vect) : bool
  requires { #"sorted.ads" 6 0 0# ((Sorted__vect.first v) < (Sorted__vect.last v)) }
  ensures { #"sorted.ads" 13 0 0# ( ( (result = (Sorted__is_sorted.is_sorted v)) /\ (Sorted__is_sorted.is_sorted__function_guard result v) ) /\ ( (result = True) <-> (forall x #"sorted.ads" 16 0 0#  "model" "model_trace:2664"  : int.
   ( ( (((Sorted__vect.first v) + 1) <= x) /\ (x <= (Sorted__vect.last v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) x)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) (x - 1)))) )) ) ) }
 
 axiom is_sorted__post_axiom :
  (forall v #"sorted.ads" 13 0 0#  : Sorted__vect.vect [(Sorted__is_sorted.is_sorted v)].
   ( ( (Sorted__vect___axiom.dynamic_invariant v True True True) /\ ((Sorted__vect.first v) < (Sorted__vect.last v)) ) -> (let result = (Sorted__is_sorted.is_sorted v) in (
    (if ((Sorted__is_sorted.is_sorted__function_guard result v)) then (
     ( (result = True) <-> (forall x #"sorted.ads" 16 0 0#  "model" "model_trace:2664"  : int.
      ( ( (((Sorted__vect.first v) + 1) <= x) /\ (x <= (Sorted__vect.last v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) x)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) (x - 1)))) )) )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "min" defined at sorted.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sorted__min___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Sorted__vect___axiom
 use        Sorted__min
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val min #"sorted.ads" 18 0 0# 
   (v : Sorted__vect.vect) : int
  requires { #"system.ads" 1 0 0# ((Sorted__vect.first v) < (Sorted__vect.last v)) }
  ensures { #"sorted.ads" 18 0 0# ( ( (result = (Sorted__min.min v)) /\ (Sorted__min.min__function_guard result v) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True) /\ (forall x #"sorted.ads" 21 0 0#  "model" "model_trace:2723"  : int.
   ( ( ((Sorted__vect.first v) <= x) /\ (x <= (Sorted__vect.last v)) ) -> (result <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) x))) )) ) ) }
 
 axiom min__post_axiom :
  (forall v #"sorted.ads" 18 0 0#  : Sorted__vect.vect [(Sorted__min.min v)].
   ( ( (Sorted__vect___axiom.dynamic_invariant v True True True) /\ ((Sorted__vect.first v) < (Sorted__vect.last v)) ) -> (let result = (Sorted__min.min v) in (
    (if ((Sorted__min.min__function_guard result v)) then (
     ( (forall x #"sorted.ads" 21 0 0#  "model" "model_trace:2723"  : int.
      ( ( ((Sorted__vect.first v) <= x) /\ (x <= (Sorted__vect.last v)) ) -> (result <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array v) x))) )) /\ (Standard__integer___axiom.dynamic_invariant result True False True) )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "sorted" defined at sorted.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Sorted__package_def
 use import "_gnatprove_standard".Main

 let def #"sorted.ads" 18 0 0# "GP_Subp:sorted.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { #"sorted.ads" 18 0 0# true }
  ensures { #"sorted.ads" 18 0 0# true }
   =
  ( "GP_Sloc:sorted.adb:41:1" () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at sorted.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Sorted__init__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Array__Int__Standard__integer
 use        Sorted__init__v
 use        Sorted__init__L_1
 use        Sorted__init__L_1__T2b
 use        Sorted__init__L_1__i
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Sorted__init__L_1__i___axiom
 use        Sorted__init__L_1___axiom
 use        Sorted__vect___axiom
 use        Sorted__init__v___axiom
 use        Sorted__init__L_1__T2b___axiom

 let def #"sorted.ads" 18 0 0# "W:diverges:N" "GP_Subp:sorted.ads:8" 
   (__void_param : unit)
  requires { #"sorted.ads" 18 0 0# true }
  ensures { #"sorted.ads" 18 0 0# ( #"sorted.ads" 11 0 0# "model_vc_post" "keep_on_simp" "GP_Shape:pragargs__forall" "GP_Sloc:sorted.ads:11:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:5" "comment:       Post => (for all X in V'Range => (V(X) = 0));
               ^ sorted.ads:11:16:VC_POSTCONDITION" (forall x #"sorted.ads" 11 0 0#  "model" "model_trace:2612"  : int.
   ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) -> ( "GP_Pretty_Ada:2626" "GP_Sloc:sorted.ads:11:41" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) ) )) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram sorted.ads:8 *)
  ;
  #"sorted.ads" 6 0 0# assume { #"sorted.ads" 6 0 0# (if (False) then (
   true) else (
   (Sorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep Sorted__init__v.v__first) (Standard__integer__rep.to_rep Sorted__init__v.v__last)))) };
  #"sorted.ads" 8 0 0# assume { #"sorted.ads" 8 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram sorted.ads:8 *)
  ;
  () (* Check for RTE in the Pre of the subprogram sorted.ads:8 *)
  ;
  #"sorted.ads" 8 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep(( #"sorted.ads" 10 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Sorted__init__v.v__first ))) <= (Standard__integer__rep.to_rep(( #"sorted.ads" 10 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Sorted__init__v.v__last )))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram sorted.ads:8 *)
  ;
  #"sorted.ads" 8 0 0# assume { #"sorted.ads" 8 0 0# ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) };
  #"sorted.ads" 8 0 0# try
   ( ( "GP_Sloc:sorted.adb:8:34" (let temp___175 = (Standard__integer__rep.to_rep(( #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Sorted__init__v.v__first ))) in (
   (let temp___176 = (Standard__integer__rep.to_rep(( #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Sorted__init__v.v__last ))) in (
    ( #"sorted.ads" 8 0 0# Sorted__init__L_1__i.i.int__content <- ( temp___175 );
    () (* Translation of an Ada loop from sorted.adb:8 *)
    ;
    (if ((Boolean.andb((temp___175 <= Sorted__init__L_1__i.i.int__content)) ((Sorted__init__L_1__i.i.int__content <= temp___176)))) then (
     #"sorted.adb" 8 0 0# try
      ( #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = Sorted__init__L_1__i.i.int__content in (
       ()))
       end ;
      (let temp___174 = #"sorted.adb" 8 0 0# (any int
      ensures {#"sorted.adb" 8 0 0# (result = Sorted__init__L_1__i.i.int__content)} 
      ) in (
       ( #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___172 = #"sorted.ads" 8 0 0# (any Array__Int__Standard__integer.map
       ensures {#"sorted.adb" 5 0 0# (result = Sorted__init__v.v.Array__Int__Standard__integer.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop sorted.adb:8 *)
        ;
        ( "GP_Sloc:sorted.adb:9:15" #"sorted.adb" 9 0 0# Sorted__init__v.v.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Sorted__init__v.v.Array__Int__Standard__integer.map__content) (Sorted__init__L_1__i.i.int__content) ((Standard__integer__rep.of_rep(0)))) ) );
        () (* While loop translating the Ada loop from sorted.adb:8 *)
        ;
        #"sorted.adb" 8 0 0# while True do
         invariant { 
          ( #"sorted.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Sloc:sorted.adb:10:33" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:1" "comment:         pragma Loop_Invariant( for all X in V'First .. I => (V(X) = 0));
                                ^ sorted.adb:10:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall x #"sorted.adb" 10 0 0#  "model" "model_trace:2353"  : int.
           ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= Sorted__init__L_1__i.i.int__content) ) -> ( "GP_Pretty_Ada:2370" "GP_Sloc:sorted.adb:10:62" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) ) )) )
          }
         ( () (* Assume implicit invariants from the loop sorted.adb:8 *)
         ;
         #"sorted.adb" 5 0 0# assume { #"sorted.adb" 5 0 0# (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          (Sorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep Sorted__init__v.v__first) (Standard__integer__rep.to_rep Sorted__init__v.v__last)))) ) /\ (forall temp___173 #"sorted.ads" 8 0 0#  : int.
          (if (( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= temp___173) /\ (temp___173 <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) )) then (
           (if ((Sorted__init__L_1__i.i.int__content < temp___173)) then (
            ((Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content temp___173) = (Array__Int__Standard__integer.get temp___172 temp___173))) else (
            true))) else true)) ) /\ (if (((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= (Standard__integer__rep.to_rep Sorted__init__v.v__last))) then (
          (Sorted__init__L_1__T2b.dynamic_property (Standard__integer__rep.to_rep Sorted__init__v.v__first) (Standard__integer__rep.to_rep Sorted__init__v.v__last) Sorted__init__L_1__i.i.int__content)) else true) ) /\ true )) (( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= Sorted__init__L_1__i.i.int__content) /\ (Sorted__init__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ))) };
         () (* Check for absence of RTE in the invariant of loop sorted.adb:8 *)
         ;
         #"sorted.ads" 8 0 0# abstract ensures {true}(let _ = ( (let x = #"sorted.ads" 8 0 0# (any int
         ) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep(( #"sorted.adb" 10 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Sorted__init__v.v__first ))) <= x)) ((x <= Sorted__init__L_1__i.i.int__content)))) then (
           #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Sorted__init__v.v.Array__Int__Standard__integer.map__content) (( #"sorted.adb" 10 0 0# assert { #"sorted.adb" 10 0 0# ( #"sorted.adb" 10 0 0# "model_vc" "keep_on_simp" "GP_Sloc:sorted.adb:10:65" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:         pragma Loop_Invariant( for all X in V'First .. I => (V(X) = 0));
                                                                ^ sorted.adb:10:65:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) ) };
           x ))))) = 0) in (
            ()))
            end ))))
         ;
         #"sorted.adb" 10 0 0# (any bool
         requires {#"sorted.adb" 10 0 0# true} 
         ensures {#"sorted.adb" 10 0 0# ( (result = True) <-> (forall x #"sorted.adb" 10 0 0#  "model" "model_trace:2353"  : int.
          ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= Sorted__init__L_1__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop sorted.adb:8 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop sorted.adb:8 *)
         ;
         (if ((Sorted__init__L_1__i.i.int__content = temp___176)) then (
          #"sorted.adb" 8 0 0# raise Sorted__init__L_1.L_1));
         #"sorted.adb" 8 0 0# Sorted__init__L_1__i.i.int__content <- ( (Sorted__init__L_1__i.i.int__content + 1) );
         ( "GP_Sloc:sorted.adb:9:15" #"sorted.adb" 9 0 0# Sorted__init__v.v.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Sorted__init__v.v.Array__Int__Standard__integer.map__content) (Sorted__init__L_1__i.i.int__content) ((Standard__integer__rep.of_rep(0)))) ) ) )
        done )))
        )))
       )
     with
      Sorted__init__L_1.L_1 -> ()
     end)) )))
   ))
    );
   ( "GP_Sloc:sorted.adb:12:7" ( #"sorted.adb" 8 0 0# abstract ensures {true}(let _ = ( (let x = #"sorted.adb" 8 0 0# (any int
   ) in (
    (if ((Boolean.andb(((Standard__integer__rep.to_rep(( #"sorted.adb" 12 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Sorted__init__v.v__first ))) <= x)) ((x <= (Standard__integer__rep.to_rep(( #"sorted.adb" 12 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Sorted__init__v.v__last ))))))) then (
     #"sorted.ads" 8 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Sorted__init__v.v.Array__Int__Standard__integer.map__content) (( #"sorted.adb" 12 0 0# assert { #"sorted.adb" 12 0 0# ( #"sorted.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.adb:12:59" "GP_Id:2" "comment:      pragma Assert( for all X in V'First .. V'Last => (V(X) = 0));
                                                          ^ sorted.adb:12:59:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) ) };
     x ))))) = 0) in (
      ()))
      end ))))
   ;
   #"sorted.adb" 12 0 0# (any bool
   requires {#"sorted.adb" 12 0 0# true} 
   ensures {#"sorted.adb" 12 0 0# ( (result = True) <-> (forall x #"sorted.adb" 12 0 0#  "model" "model_trace:2376"  : int.
    ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) )) )} 
   ) ) in (
    ()))
    end ;
   #"sorted.adb" 12 0 0# assert { #"sorted.adb" 12 0 0# ( #"sorted.adb" 12 0 0# "model_vc" "keep_on_simp" "GP_Sloc:sorted.adb:12:22" "GP_Reason:VC_ASSERT" "GP_Id:3" "comment:      pragma Assert( for all X in V'First .. V'Last => (V(X) = 0));
                     ^ sorted.adb:12:22:VC_ASSERT" "GP_Shape:pragargs__forall" (forall x #"sorted.adb" 12 0 0#  "model" "model_trace:2376"  : int.
    ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) -> ( "GP_Pretty_Ada:2395" "GP_Sloc:sorted.adb:12:56" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) ) )) ) } ) );
   #"sorted.adb" 5 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"sorted.adb" 5 0 0# abstract ensures {true}(let _ = ( (let x = #"sorted.adb" 5 0 0# (any int
  ) in (
   (if ((Boolean.andb(((Standard__integer__rep.to_rep(( #"sorted.ads" 11 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Sorted__init__v.v__first ))) <= x)) ((x <= (Standard__integer__rep.to_rep(( #"sorted.ads" 11 0 0# abstract ensures {true}(let _ = Sorted__init__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Sorted__init__v.v__last ))))))) then (
    #"sorted.ads" 8 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Sorted__init__v.v.Array__Int__Standard__integer.map__content) (( #"sorted.ads" 11 0 0# assert { #"sorted.ads" 11 0 0# ( #"sorted.ads" 11 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:sorted.ads:11:44" "GP_Id:4" "comment:       Post => (for all X in V'Range => (V(X) = 0));
                                           ^ sorted.ads:11:44:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) ) };
    x ))))) = 0) in (
     ()))
     end ))))
  ;
  #"sorted.ads" 11 0 0# (any bool
  requires {#"sorted.ads" 11 0 0# true} 
  ensures {#"sorted.ads" 11 0 0# ( (result = True) <-> (forall x #"sorted.ads" 11 0 0#  "model" "model_trace:2612"  : int.
   ( ( ((Standard__integer__rep.to_rep Sorted__init__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Sorted__init__v.v__last)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Sorted__init__v.v.Array__Int__Standard__integer.map__content x)) = 0) )) )} 
  ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_sorted" defined at sorted.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Sorted__is_sorted__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Sorted__vect___axiom
 use        Sorted__is_sorted__v
 use        Sorted__is_sorted__L_2
 use        Sorted__is_sorted__L_2__i
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Sorted__is_sorted__L_2__i___axiom
 use        Sorted__is_sorted__L_2___axiom
 use        Sorted__vect___axiom
 use        Sorted__is_sorted__v___axiom

 val sorted__is_sorted__result #"sorted.ads" 13 0 0# "model_projected" "model_trace:2627@result"  : bool__ref 
 
 let def #"sorted.ads" 13 0 0# "W:diverges:N" "GP_Subp:sorted.ads:13" 
   (__void_param : unit)
  requires { #"sorted.ads" 13 0 0# true }
  ensures { #"sorted.ads" 13 0 0# ( #"sorted.ads" 16 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:sorted.ads:16:16" "GP_Id:14" "comment:       Post => (Is_Sorted'Result = (for all X in V'First + 1 .. V'Last => (V(X) >= V(X - 1))));
               ^ sorted.ads:16:16:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:2845" "GP_Sloc:sorted.ads:16:16" ( (sorted__is_sorted__result.bool__content = True) <-> (forall x #"sorted.ads" 16 0 0#  "model" "model_trace:2664"  : int.
   ( ( (((Sorted__vect.first Sorted__is_sorted__v.v) + 1) <= x) /\ (x <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__is_sorted__v.v) x)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__is_sorted__v.v) (x - 1)))) )) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram sorted.ads:13 *)
  ;
  #"sorted.ads" 6 0 0# assume { #"sorted.ads" 6 0 0# (Sorted__vect___axiom.dynamic_invariant Sorted__is_sorted__v.v True False True) };
  #"sorted.ads" 13 0 0# assume { #"sorted.ads" 13 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram sorted.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram sorted.ads:13 *)
  ;
  #"sorted.ads" 13 0 0# abstract ensures {true}(let _ = (( #"sorted.ads" 13 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
   ()))
   end ;
  (Sorted__vect.first(Sorted__is_sorted__v.v)) ) < ( #"sorted.ads" 13 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
   ()))
   end ;
  (Sorted__vect.last(Sorted__is_sorted__v.v)) )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram sorted.ads:13 *)
  ;
  #"sorted.ads" 13 0 0# assume { #"sorted.ads" 13 0 0# ((Sorted__vect.first Sorted__is_sorted__v.v) < (Sorted__vect.last Sorted__is_sorted__v.v)) };
  #"sorted.ads" 13 0 0# try
   ( ( "GP_Sloc:sorted.adb:18:38" (let temp___180 = ( #"sorted.adb" 18 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
    ()))
    end ;
   (Sorted__vect.first(Sorted__is_sorted__v.v)) ) in (
   (let temp___181 = ( #"sorted.adb" 18 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:sorted.adb:18:34" "GP_Id:9" "comment:      for I in V'First .. V'Last - 1 loop
                                 ^ sorted.adb:18:34:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__range__sub" (Standard__integer.range_check_((( #"sorted.adb" 18 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
    ()))
    end ;
   (Sorted__vect.last(Sorted__is_sorted__v.v)) ) - 1))) ) in (
    ( #"sorted.ads" 13 0 0# Sorted__is_sorted__L_2__i.i.int__content <- ( temp___180 );
    () (* Translation of an Ada loop from sorted.adb:18 *)
    ;
    (if ((Boolean.andb((temp___180 <= Sorted__is_sorted__L_2__i.i.int__content)) ((Sorted__is_sorted__L_2__i.i.int__content <= temp___181)))) then (
     #"sorted.adb" 18 0 0# try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop sorted.adb:18 *)
      ;
      () (* While loop translating the Ada loop from sorted.adb:18 *)
      ;
      #"sorted.adb" 18 0 0# while True do
       ( () (* Assume implicit invariants from the loop sorted.adb:18 *)
       ;
       #"sorted.adb" 18 0 0# assume { #"sorted.adb" 18 0 0# ( ((Sorted__vect.first Sorted__is_sorted__v.v) <= Sorted__is_sorted__L_2__i.i.int__content) /\ (Sorted__is_sorted__L_2__i.i.int__content <= ((Sorted__vect.last Sorted__is_sorted__v.v) - 1)) ) };
       () (* Check for absence of RTE in the invariant of loop sorted.adb:18 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop sorted.adb:18 *)
       ;
       ( "GP_Sloc:sorted.adb:19:10" (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__is_sorted__v.v))) (( #"sorted.adb" 19 0 0# assert { #"sorted.adb" 19 0 0# ( #"sorted.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.adb:19:15" "GP_Id:6" "comment:         if(V(I) > V(I + 1)) then
              ^ sorted.adb:19:15:VC_INDEX_CHECK" "GP_Shape:L_2_while__if__cmp__ixdcomp" ( ((Sorted__vect.first Sorted__is_sorted__v.v) <= Sorted__is_sorted__L_2__i.i.int__content) /\ (Sorted__is_sorted__L_2__i.i.int__content <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) ) };
       Sorted__is_sorted__L_2__i.i.int__content ))))) > (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__is_sorted__v.v))) ((let temp___179 = ( #"sorted.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Sloc:sorted.adb:19:24" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:7" "comment:         if(V(I) > V(I + 1)) then
                       ^ sorted.adb:19:24:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__cmp__ixdcomp__add" (Standard__integer.range_check_((Sorted__is_sorted__L_2__i.i.int__content + 1))) ) in (
        ( #"sorted.adb" 19 0 0# assert { #"sorted.adb" 19 0 0# ( #"sorted.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.adb:19:24" "GP_Shape:L_2_while__if__cmp__ixdcomp__add" "GP_Id:8" "comment:         if(V(I) > V(I + 1)) then
                       ^ sorted.adb:19:24:VC_INDEX_CHECK" ( ((Sorted__vect.first Sorted__is_sorted__v.v) <= temp___179) /\ (temp___179 <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) ) };
        temp___179 )))
       )))))) then (
        ( "GP_Sloc:sorted.adb:20:13" ( #"sorted.adb" 20 0 0# sorted__is_sorted__result.bool__content <- ( (Boolean.of_int(0)) );
        #"sorted.adb" 20 0 0# raise Return__exc ) )) else (
        ())) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop sorted.adb:18 *)
       ;
       (if ((Sorted__is_sorted__L_2__i.i.int__content = temp___181)) then (
        #"sorted.adb" 18 0 0# raise Sorted__is_sorted__L_2.L_2));
       #"sorted.adb" 18 0 0# Sorted__is_sorted__L_2__i.i.int__content <- ( (Sorted__is_sorted__L_2__i.i.int__content + 1) ) )
      done )
     with
      Sorted__is_sorted__L_2.L_2 -> ()
     end)) )))
   ))
    );
   ( "GP_Sloc:sorted.adb:24:7" ( #"sorted.adb" 24 0 0# sorted__is_sorted__result.bool__content <- ( (Boolean.of_int(1)) );
   #"sorted.adb" 24 0 0# raise Return__exc ) );
   #"sorted.adb" 15 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"sorted.adb" 15 0 0# abstract ensures {true}(let _ = ((Boolean.to_int(sorted__is_sorted__result.bool__content)) = (Boolean.to_int(( (let x = #"sorted.ads" 16 0 0# (any int
  ) in (
   (if ((Boolean.andb((( #"sorted.ads" 16 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:sorted.ads:16:58" "GP_Id:10" "comment:       Post => (Is_Sorted'Result = (for all X in V'First + 1 .. V'Last => (V(X) >= V(X - 1))));
                                                         ^ sorted.ads:16:58:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__forall__range__add" (Standard__integer.range_check_((( #"sorted.ads" 16 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
    ()))
    end ;
   (Sorted__vect.first(Sorted__is_sorted__v.v)) ) + 1))) ) <= x)) ((x <= ( #"sorted.ads" 13 0 0# abstract ensures {true}(let _ = Sorted__is_sorted__v.v in (
    ()))
    end ;
   (Sorted__vect.last(Sorted__is_sorted__v.v)) ))))) then (
    #"sorted.ads" 13 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__is_sorted__v.v))) (( #"sorted.ads" 16 0 0# assert { #"sorted.ads" 16 0 0# ( #"sorted.ads" 16 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.ads:16:78" "GP_Id:11" "comment:       Post => (Is_Sorted'Result = (for all X in V'First + 1 .. V'Last => (V(X) >= V(X - 1))));
                                                                             ^ sorted.ads:16:78:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp" ( ((Sorted__vect.first Sorted__is_sorted__v.v) <= x) /\ (x <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) ) };
    x ))))) >= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__is_sorted__v.v))) ((let temp___182 = ( #"sorted.ads" 16 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:sorted.ads:16:88" "GP_Id:12" "comment:       Post => (Is_Sorted'Result = (for all X in V'First + 1 .. V'Last => (V(X) >= V(X - 1))));
                                                                                       ^ sorted.ads:16:88:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp__sub" (Standard__integer.range_check_((x - 1))) ) in (
     ( #"sorted.ads" 16 0 0# assert { #"sorted.ads" 16 0 0# ( #"sorted.ads" 16 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.ads:16:88" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp__sub" "GP_Id:13" "comment:       Post => (Is_Sorted'Result = (for all X in V'First + 1 .. V'Last => (V(X) >= V(X - 1))));
                                                                                       ^ sorted.ads:16:88:VC_INDEX_CHECK" ( ((Sorted__vect.first Sorted__is_sorted__v.v) <= temp___182) /\ (temp___182 <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) ) };
     temp___182 )))
    ))))) in (
     ()))
     end ))))
  ;
  #"sorted.ads" 16 0 0# (any bool
  requires {#"sorted.ads" 16 0 0# true} 
  ensures {#"sorted.ads" 16 0 0# ( (result = True) <-> (forall x #"sorted.ads" 16 0 0#  "model" "model_trace:2664"  : int.
   ( ( (((Sorted__vect.first Sorted__is_sorted__v.v) + 1) <= x) /\ (x <= (Sorted__vect.last Sorted__is_sorted__v.v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__is_sorted__v.v) x)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__is_sorted__v.v) (x - 1)))) )) )} 
  ) )))) in (
   ()))
   end ;
  sorted__is_sorted__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "min" defined at sorted.ads:18, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Sorted__min__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Sorted__vect
 use        Sorted__vect___axiom
 use        Sorted__min__v
 use        Sorted__min__min
 use        Sorted__min__L_3
 use        Sorted__min__L_3__i
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Sorted__min__min___axiom
 use        Sorted__min__L_3__i___axiom
 use        Sorted__min__L_3___axiom
 use        Sorted__vect___axiom
 use        Sorted__min__v___axiom

 val sorted__min__result #"sorted.ads" 18 0 0# "model_projected" "model_trace:2690@result"  : int__ref 
 
 let def #"system.ads" 1 0 0# "W:diverges:N" "GP_Subp:sorted.ads:18" 
   (__void_param : unit)
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( #"sorted.ads" 21 0 0# "model_vc_post" "keep_on_simp" "GP_Shape:pragargs__forall" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:sorted.ads:21:16" "GP_Id:19" "comment:       Post => (for all X in V'Range => (Min'Result <= V(X)));
               ^ sorted.ads:21:16:VC_POSTCONDITION" (forall x #"sorted.ads" 21 0 0#  "model" "model_trace:2723"  : int.
   ( ( ((Sorted__vect.first Sorted__min__v.v) <= x) /\ (x <= (Sorted__vect.last Sorted__min__v.v)) ) -> ( "GP_Pretty_Ada:2737" "GP_Sloc:sorted.ads:21:41" (sorted__min__result.int__content <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__min__v.v) x))) ) )) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram sorted.ads:18 *)
  ;
  #"sorted.ads" 6 0 0# assume { #"sorted.ads" 6 0 0# (Sorted__vect___axiom.dynamic_invariant Sorted__min__v.v True False True) };
  #"sorted.ads" 18 0 0# assume { #"sorted.ads" 18 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram sorted.ads:18 *)
  ;
  () (* Check for RTE in the Pre of the subprogram sorted.ads:18 *)
  ;
  #"sorted.ads" 18 0 0# abstract ensures {true}(let _ = (( #"sorted.ads" 18 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
   ()))
   end ;
  (Sorted__vect.first(Sorted__min__v.v)) ) < ( #"sorted.ads" 18 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
   ()))
   end ;
  (Sorted__vect.last(Sorted__min__v.v)) )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram sorted.ads:18 *)
  ;
  #"sorted.ads" 18 0 0# assume { #"sorted.ads" 18 0 0# ((Sorted__vect.first Sorted__min__v.v) < (Sorted__vect.last Sorted__min__v.v)) };
  #"sorted.ads" 18 0 0# try
   ( #"sorted.adb" 28 0 0# Sorted__min__min.min.int__content <- ( ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
    ()))
    end ;
   (Sorted__vect.first(Sorted__min__v.v)) ) );
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__integer___axiom.dynamic_invariant Sorted__min__min.min.int__content True False True) };
   ( "GP_Sloc:sorted.adb:31:38" (let temp___185 = ( #"sorted.adb" 31 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:sorted.adb:31:24" "GP_Id:17" "comment:      for I in V'First + 1 .. V'Last loop
                       ^ sorted.adb:31:24:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__range__add" (Standard__integer.range_check_((( #"sorted.adb" 31 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
    ()))
    end ;
   (Sorted__vect.first(Sorted__min__v.v)) ) + 1))) ) in (
   (let temp___186 = ( #"sorted.adb" 31 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
    ()))
    end ;
   (Sorted__vect.last(Sorted__min__v.v)) ) in (
    ( #"sorted.ads" 18 0 0# Sorted__min__L_3__i.i.int__content <- ( temp___185 );
    () (* Translation of an Ada loop from sorted.adb:31 *)
    ;
    (if ((Boolean.andb((temp___185 <= Sorted__min__L_3__i.i.int__content)) ((Sorted__min__L_3__i.i.int__content <= temp___186)))) then (
     #"sorted.adb" 31 0 0# try
      ( #"sorted.adb" 31 0 0# abstract ensures {true}(let _ = Sorted__min__min.min.int__content in (
       ()))
       end ;
      (let temp___184 = #"sorted.adb" 28 0 0# (any int
      ensures {#"system.ads" 1 0 0# (result = Sorted__min__min.min.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop sorted.adb:31 *)
       ;
       () (* While loop translating the Ada loop from sorted.adb:31 *)
       ;
       #"sorted.adb" 31 0 0# while True do
        ( () (* Assume implicit invariants from the loop sorted.adb:31 *)
        ;
        #"sorted.adb" 31 0 0# assume { #"sorted.adb" 31 0 0# (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Sorted__min__min.min.int__content False True True) ) /\ true )) (( (((Sorted__vect.first Sorted__min__v.v) + 1) <= Sorted__min__L_3__i.i.int__content) /\ (Sorted__min__L_3__i.i.int__content <= (Sorted__vect.last Sorted__min__v.v)) ))) };
        () (* Check for absence of RTE in the invariant of loop sorted.adb:31 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop sorted.adb:31 *)
        ;
        ( "GP_Sloc:sorted.adb:32:10" (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__min__v.v))) (( #"sorted.adb" 32 0 0# assert { #"sorted.adb" 32 0 0# ( #"sorted.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.adb:32:15" "GP_Id:16" "comment:         if(V(I) < min) then
              ^ sorted.adb:32:15:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__cmp__ixdcomp" ( ((Sorted__vect.first Sorted__min__v.v) <= Sorted__min__L_3__i.i.int__content) /\ (Sorted__min__L_3__i.i.int__content <= (Sorted__vect.last Sorted__min__v.v)) ) ) };
        Sorted__min__L_3__i.i.int__content ))))) < Sorted__min__min.min.int__content)) then (
         ( "GP_Sloc:sorted.adb:33:16" #"sorted.adb" 33 0 0# Sorted__min__min.min.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__min__v.v))) (( #"sorted.adb" 33 0 0# assert { #"sorted.adb" 33 0 0# ( #"sorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:sorted.adb:33:21" "GP_Id:15" "comment:           min := V(I);
                    ^ sorted.adb:33:21:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__min_assign__ixdcomp" ( ((Sorted__vect.first Sorted__min__v.v) <= Sorted__min__L_3__i.i.int__content) /\ (Sorted__min__L_3__i.i.int__content <= (Sorted__vect.last Sorted__min__v.v)) ) ) };
         Sorted__min__L_3__i.i.int__content ))))) ) )) else (
         ())) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop sorted.adb:31 *)
        ;
        (if ((Sorted__min__L_3__i.i.int__content = temp___186)) then (
         #"sorted.adb" 31 0 0# raise Sorted__min__L_3.L_3));
        #"sorted.adb" 31 0 0# Sorted__min__L_3__i.i.int__content <- ( (Sorted__min__L_3__i.i.int__content + 1) ) )
       done )))
       )
     with
      Sorted__min__L_3.L_3 -> ()
     end)) )))
   ))
    );
   ( "GP_Sloc:sorted.adb:37:7" ( #"sorted.adb" 37 0 0# sorted__min__result.int__content <- ( Sorted__min__min.min.int__content );
   #"sorted.adb" 37 0 0# raise Return__exc ) );
   #"sorted.adb" 27 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"sorted.adb" 27 0 0# abstract ensures {true}(let _ = ( (let x = #"sorted.adb" 27 0 0# (any int
  ) in (
   (if ((Boolean.andb((( #"sorted.adb" 27 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
    ()))
    end ;
   (Sorted__vect.first(Sorted__min__v.v)) ) <= x)) ((x <= ( #"sorted.ads" 18 0 0# abstract ensures {true}(let _ = Sorted__min__v.v in (
    ()))
    end ;
   (Sorted__vect.last(Sorted__min__v.v)) ))))) then (
    #"sorted.ads" 18 0 0# abstract ensures {true}(let _ = (sorted__min__result.int__content <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Sorted__vect.to_array(Sorted__min__v.v))) (( #"sorted.ads" 21 0 0# assert { #"sorted.ads" 21 0 0# ( #"sorted.ads" 21 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:sorted.ads:21:58" "GP_Id:18" "comment:       Post => (for all X in V'Range => (Min'Result <= V(X)));
                                                         ^ sorted.ads:21:58:VC_INDEX_CHECK" ( ((Sorted__vect.first Sorted__min__v.v) <= x) /\ (x <= (Sorted__vect.last Sorted__min__v.v)) ) ) };
    x )))))) in (
     ()))
     end ))))
  ;
  #"sorted.ads" 21 0 0# (any bool
  requires {#"sorted.ads" 21 0 0# true} 
  ensures {#"sorted.ads" 21 0 0# ( (result = True) <-> (forall x #"sorted.ads" 21 0 0#  "model" "model_trace:2723"  : int.
   ( ( ((Sorted__vect.first Sorted__min__v.v) <= x) /\ (x <= (Sorted__vect.last Sorted__min__v.v)) ) -> (sorted__min__result.int__content <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Sorted__vect.to_array Sorted__min__v.v) x))) )) )} 
  ) ) in (
   ()))
   end ;
  sorted__min__result.int__content )
end
